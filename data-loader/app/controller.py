"""
Purpose:
    Contains functions that read data files generated by the `repo/scripts/data_processing/`
    scripts and passes them to the database.
    Loaded data is sent to the database tables with different functions for each
    table. See the `database_functions/` directory for details on these functions.

Inputs:
    None

Outputs:
    None

Authors: Pasan Kamburugamuwa & Matthew DeVerna
"""
import datetime
import logging
import os
import re
import traceback
import pandas as pd
from database_functions import reports, fib_indices, posts, reshares, profile_links
from top_fibers_pkg.utils import get_logger

FIB_INDICES = "fib_indices"
TOP_SPREADERS = "top_spreader"
N_ROWS = 50

LOG_DIR = "/home/data/apps/topfibers/repo/logs"
LOG_FNAME = "database_server.log"
script_name = os.path.basename(__file__)
logger = get_logger(LOG_DIR, LOG_FNAME, script_name=script_name, also_print=True)

def add_data(read_dir, platform, selected_month):
    """
    Read preprocessed files and pass data to the database

    Parameters
    -----------
    - read_dir (str): directory to read data from. Combined with `selected_month`
         to create full path to data
    - platform (str): specifies the platform data we are working with
        Options: ["facebook", "twitter"]
    - selected_month (str): The selected month for which we will insert data

    Returns
    -----------
    None
    """
    list_dir = os.listdir(os.path.join(read_dir, selected_month))

    if len(list_dir) > 0:
        logger.info("Found the data directory on that day!")
        file_date = extract_date_convert_datetime(list_dir[0])

        # If the report has already been added to the database for this platform, we skip
        if not reports.report_already_added(file_date, selected_month, platform):
            report_id = reports.add_reports(file_date, selected_month, platform)

            for file in list_dir:
                try:
                    path_to_data = os.path.join(read_dir, selected_month, file)

                    # This block loads the fib indices file for a given month and
                    # sends its data to the database.
                    # The file loaded is based on the provided `platform`
                    if FIB_INDICES in file:
                        logger.info(
                            f"Loading fib indices file for month: {selected_month}"
                        )
                        df_fib_indices = pd.read_parquet(path_to_data)

                        # The data frame is already sorted in descending order so
                        # taking the top N rows selects the top N FIBers
                        temp_df = df_fib_indices.head(N_ROWS)
                        for index, row in temp_df.iterrows():
                            try:
                                # Send data to fib_indices table
                                fib_indices.add_fib_indices(
                                    row.user_id,
                                    report_id.get("id"),
                                    row.fib_index,
                                    row.total_reshares,
                                    row.username,
                                    platform,
                                )
                            except Exception as err:
                                traceback.print_tb(err.__traceback__)
                                logger.error("Error in adding data to fib indices")

                    # This block loads the top spreaders file for a given month and
                    # sends its data to the database.
                    # The file loaded is based on the provided `platform`
                    elif TOP_SPREADERS in file:
                        logger.info(
                           f"Loading top spreader file for the month: {selected_month}"
                        )
                        df_top_spreaders = pd.read_parquet(path_to_data)
                        for index, row in df_top_spreaders.iterrows():
                            try:
                                # Send data to posts table
                                posts.add_posts(
                                    row.post_id,
                                    row.user_id,
                                    platform,
                                    row.timestamp,
                                    row.post_url,)
                                # Send data to reshares table
                                reshares.add_reshares(
                                    row.post_id,
                                    report_id.get("id"),
                                    platform,
                                    row.num_reshares,
                                )
                            except Exception as err:
                                traceback.print_tb(err.__traceback__)
                                logger.error(
                                    "Error in adding data to post table or reshares table"
                                )
                except FileNotFoundError as e:
                    traceback.print_tb(e.__traceback__)
                    logger.error(f"file {file} does not exist")
        else:
            logger.error(
                "There is already records with the file date. Can not proceed!"
            )
            raise Exception(
                "Already there is a record with file date. Can not proceed!"
            )
    else:
        logger.error("There is no files related to that name!")
        raise Exception("There is no files related to the that name!")


def add_profile_pic_links(read_file, platform):
    """
    Check the profile pictures existed, if no pass the data to profile_link table

    Parameters
    -----------
    - read_file (str): data file path with file name
    - platform (str): specifies the platform data we are working with
        Options: ["facebook", "twitter"]

    Returns
    -----------
    None
    """
    logger.info("Add profile picture links!")
    df_profile_links = pd.read_parquet(read_file)
    existing_links = profile_links.get_all_profile_links()
    for index, row in df_profile_links.iterrows():
        # check if the user_id already exists in the database
        if existing_links is None or row.user_id not in existing_links:
            try:
                profile_links.add_profile_links(
                    row.user_id,
                    platform,
                    row.profile_image_url
                )
            except Exception as err:
                traceback.print_tb(err.__traceback__)
                logger.error(
                    "Error in adding data to profile link table!"
                )


def extract_date_convert_datetime(file_name):
    """
    Extract the date from each file name
    """
    match_str = re.search(r"\d{4}_\d{2}_\d{2}", file_name)
    return datetime.datetime.strptime(match_str.group().replace("_", "-"), "%Y-%m-%d")
